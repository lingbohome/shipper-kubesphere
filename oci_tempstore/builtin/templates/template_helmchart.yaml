apiVersion: v1
kind: ConfigMap
metadata:
  name: helmchart-generator
  namespace: shipper-system
  labels:
    shipper.lingbohome.com/managed: "true"
    shipper.lingbohome.com/templated-by: "builder"
    template.shipper.lingbohome.com/version: "0.3.1"
    template.shipper.lingbohome.com/level: "system"
  annotations:
    kubesphere.io/alias-name: helmchart包生成器
    kubesphere.io/creator: system
    kubesphere.io/description: "基于用户可视化定义服务元数据，快速生成helmchart package,并支持同时推送到chart的经典仓库和oci仓库"
    cert.shipper.lingbohome.com/scope: "oss,oci"
data:
  template.yaml: |
    apiVersion: tekton.dev/v1
    kind: PipelineRun
    metadata:
      annotations:
        tekton.dev/displayName: Shipper-Helmchart-Generator
        tekton.dev/pipelines.minVersion: 0.17.0
        tekton.dev/platforms: linux/amd64
        tekton.dev/tags: helmchart
      generateName: baesd-shipper
      labels:
        app.kubernetes.io/version: '0.3'
        shipper.lingbohome.com/platform: shipper
        shipper.lingbohome.com/useFor: builder
    spec:
      params:
      pipelineSpec:
        description: The Helmchart-Generator generate a stateless helmchart package and push it to the oss repository based on the user's definition..
        params:
        tasks:
          - name: helmchart-generator
            params:
            workspaces:
              - name: dockerconfig
                workspace: dockerconfig-ws            
            taskSpec:
              description: Define services metadata based on user visualization and quickly generate helmchart packages.
              params:
              results:
                - description: The digest of the built `HELMCHART_PACKAGE`.
                  name: HELMCHART_PACKAGE_DIGEST
                  type: string
                - description: The oci digest of the built `HELMCHART_PACKAGE`.
                  name: HELMCHART_PACKAGE_OCI_DIGEST
                  type: string                    
                - description: The oss name of the built `HELMCHART_PACKAGE`.
                  name: HELMCHART_PACKAGE_OSSNAME
                  type: string
                - description: The bucket of the built `HELMCHART_PACKAGE`.
                  name: HELMCHART_PACKAGE_BUCKET
                  type: string
              workspaces:
                - description: Includes a docker `config.json`
                  mountPath: /root/.config/helm/registry
                  name: dockerconfig
                  optional: true                                                     
              steps:            
                - computeResources: {}
                  image: registry.cn-shanghai.aliyuncs.com/kube-shipper/helmchart-generator:0.2.3
                  name: generate
                  script: |
                    #!/usr/bin/env bash
                    set -e

                    cat > /helmchart/Chart.yaml << EOF
                    apiVersion: v2
                    name: {{ if .Values.basic.followBuilderName }}{{ .Release.BuilderName }}{{- else }}{{ .Values.basic.name | default .Release.BuilderName }}{{- end }}
                    description: {{ .Values.basic.description | quote }}
                    {{- if .Values.basic.icon }}
                    icon: {{ .Values.basic.icon | quote }}
                    {{- end }} 
                    {{- if .Values.basic.home }}
                    home: {{ .Values.basic.home | quote }}
                    {{- end }}
                    {{- if .Values.basic.maintainers }}
                    maintainers:
                      {{- toYaml .Values.basic.maintainers | nindent 18 }}                     
                    {{- end }}                      
                    type: application
                    version: {{ .Values.basic.version }}
                    appVersion: {{ .Values.basic.version | quote }}
                    annotations:
                      app.kubesphere.io/category: {{ .Values.basic.category | default "other" | quote }}
                      shipper.lingbohome.com/generate-by: shipper
                      shipper.lingbohome.com/alias-name: {{ .Values.basic.aliasName | quote }}
                      shipper.lingbohome.com/builder-ref: {{ .Release.BuilderName | quote }}
                    {{- if .Values.basic.keywords }}
                    keywords:
                      {{- toYaml .Values.basic.keywords | nindent 18 }} 
                    {{- end }}   
                    EOF

                    chartname={{- if .Values.basic.followBuilderName }}{{ .Release.BuilderName }}{{- else }}{{ .Values.basic.name | default .Release.BuilderName }}{{- end }}

                    cat > /helmchart/values.yaml << EOF
                    ## @section 全局参数
                    ## @descriptionStart 该节点用于配置一些全局的参数，它在所有的chart及子chart中都能访问的值
                    ##
                    ## 全局参数建议定义在[该节点下](#全局参数).
                    ## @descriptionEnd
                    ## @param global.imageRegistry [string,default:docker.io] 全局docker镜像仓库的host地址
                    ## @param global.imagePullPolicy [string,default:IfNotPresent] 全局k8s镜像的拉取策略
                    ## @param global.imagePullSecrets [array] 全局docker镜像仓库的secret名称数组
                    ##
                    global:
                      imageRegistry: "docker.io"
                      imagePullPolicy: IfNotPresent
                      imagePullSecrets: []


                    ## @section 通用参数
                    ## @descriptionStart 该节点用于配置一些通用的参数，
                    ##
                    ## 通用参数建议定义在[该节点下](#通用参数).
                    ## @descriptionEnd

                    ## @param nameOverride [string] 覆盖chart.name的值
                    ##
                    nameOverride: ""
                    ## @param fullnameOverride [string] 覆盖chart.fullname的值
                    ##
                    fullnameOverride: ""
                    ## @param category [string] 用于标识服务的类别或用途
                    ##
                    category: {{ .Values.basic.category | default "other" }}
                    ## @param imagePullSecrets [array] docker镜像仓库的secret名称数组
                    ##
                    imagePullSecrets: []


                    ## @section 镜像配置相关参数
                    ## @descriptionStart 该节点用于配置镜像，
                    ##
                    ## 配置镜像参数建议定义在[该节点下](#镜像配置相关参数).
                    ## @descriptionEnd
                    ## @param image.registry [string,default:registry.cn-shanghai.aliyuncs.com] 镜像仓库的host地址
                    ## @param image.repository [string] 镜像repo
                    ## @param image.tag [string] 镜像tag
                    ## @param image.pullPolicy [string,default:IfNotPresent] 镜像拉取策略
                    ##
                    image:
                      registry: {{ .Values.image.registry | default "registry.cn-shanghai.aliyuncs.com" }}
                      repository: {{ .Values.image.repository | default "nginx" }}
                      tag: {{ .Values.image.tag | default "latest" | quote }}
                      pullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}


                    ## @section 配置服务网络相关参数
                    ## @descriptionStart 该节点用于配置网络，
                    ##
                    ## 配置网络相关参数建议定义在[该节点下](#网络相关参数).
                    ## @descriptionEnd

                    service:
                      ## @param service.type 暴露的服务类型 NodePort|ClusterIP
                      ##
                      type: {{ .Values.networking.serviceType | default "ClusterIP" }}
                      ## @param service.port 暴露的服务端口
                      ##  
                      port: {{ .Values.networking.port | default 80 }}
                      ## @param service.nodePort NodePort服务类型下暴露的外部端口
                      ##  
                      nodePort: {{ if eq .Values.networking.serviceType "NodePort" }}{{ .Values.networking.nodePort | default 30000 }}{{- else }}30000{{- end }}

                    ingress:
                      ## @param ingress.enabled 是否启用ingress
                      ##
                      enabled: {{ .Values.networking.enabledIngress | default false }}
                      ## @param ingress.className [string]  ingress class name
                      ##    
                      className: {{ if .Values.networking.enabledIngress }}{{ .Values.networking.ingress.className | default "''" }}{{- else }}""{{- end }}
                      ## @param ingress.annotations [object] ingress annotations
                      ##     
                      {{- if and .Values.networking.enabledIngress .Values.networking.ingress.annotations }}   
                      annotations:
                        {{- toYaml .Values.networking.ingress.annotations | nindent 20 }}
                      {{- else }}  
                      annotations: {}
                      {{- end }}
                        # kubernetes.io/ingress.class: nginx
                        # kubernetes.io/tls-acme: "true"
                      ## @param ingress.hosts[0].host ingress host地址
                      ## @skip ingress.hosts[0].paths
                      ##        
                      hosts:
                        - host: {{ if .Values.networking.enabledIngress }}{{ .Values.networking.ingress.host | default "example.com" }}{{- else }}"example.com"{{- end }}
                          paths:
                            - path: /
                              pathType: ImplementationSpecific
                      ## @param ingress.tls [array] ingress tls配置              
                      tls: []
                      #  - secretName: chart-example-tls
                      #    hosts:
                      #      - chart-example.local



                    ## @section 配置服务环境变量
                    ## @descriptionStart 该节点用于配置环境变量，
                    ##
                    ## 配置环境相关参数建议定义在[该节点下](#环境变量参数).
                    ## @descriptionEnd

                    {{- if .Values.environment.envs }}
                    {{- range $key, $value := .Values.environment.envs }}
                    ## @param envs.{{- $key }} [string,default:{{- $value }}] {{ $key }}
                    {{- end }}
                    ## 
                    envs:
                      {{- toYaml .Values.environment.envs | nindent 18 }}
                    {{- else }}
                    ## @param envs [object] 环境变量
                    ##  
                    envs: {}
                    {{- end }}



                    ## @section 配置服务计算资源
                    ## @descriptionStart 该节点用于配置计算资源，
                    ##
                    ## 配置计算资源相关参数建议定义在[该节点下](#计算资源参数).
                    ## @descriptionEnd

                    ## @param resources.limits [object] 配置服务资源限制 [参考引用](https://kubernetes.io/zh-cn/docs/concepts/configuration/manage-resources-containers/#requests-and-limits)
                    ## @param resources.requests [object] 配置服务资源请求 [参考引用](https://kubernetes.io/zh-cn/docs/concepts/configuration/manage-resources-containers/#requests-and-limits)
                    ##
                    resources:
                      # We usually recommend not to specify default resources and to leave this as a conscious
                      # choice for the user. This also increases chances charts run on environments with little
                      # resources, such as Minikube. If you do want to specify resources, uncomment the following
                      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
                      limits:
                        cpu: {{ .Values.resources.limitsCPU | default "4" }}
                        memory: {{ .Values.resources.limitsMemory | default "4" }}Gi
                      requests:
                        cpu: {{ .Values.resources.requestsCPU | default "10" }}m
                        memory: {{ .Values.resources.requestsMemory | default "64" }}Mi


                    ## @section 配置部署相关参数
                    ## @descriptionStart 该节点用于配置部署参数，
                    ##
                    ## 配置部署相关参数建议定义在[该节点下](#部署参数).
                    ## @descriptionEnd

                    ## @param args [array,nullable] 服务启动参数
                    ##
                    {{- if .Values.advanced.startEntrySetting.args }}
                    args:
                      {{- toYaml .Values.advanced.startEntrySetting.args | nindent 18 }}
                    {{- else }}  
                    args: []  
                    {{- end }}

                    ## @param command [array,nullable] 服务启动命令
                    ##
                    {{- if .Values.advanced.startEntrySetting.command }}
                    command:
                      {{- toYaml .Values.advanced.startEntrySetting.command | nindent 18 }}
                    {{- else }}  
                    command: []  
                    {{- end }}  



                    healthCheck:
                      ## @param healthCheck.enabled 是否启用健康检查
                      ##
                      enabled: {{ .Values.advanced.enabledHealthCheck | default false }}
                      ## @param healthCheck.httpPath 健康检查的httppath
                      ##  
                      httpPath: {{ if .Values.advanced.enabledHealthCheck }}{{ .Values.advanced.httpPathOfHealthCheck | default "/" }}{{- else }}"/"{{- end }}

                    appConfig:
                      ## @param appConfig.enabled 是否设置服务配置文件
                      ##
                      enabled: {{ .Values.advanced.enabledAppConfig | default false }}
                      ## @param appConfig.mountPath 配置文件挂载路径
                      ##  
                      mountPath: {{ if .Values.advanced.enabledAppConfig }}{{ .Values.advanced.mountPathOfAppConfig | default "/var/appsettings.json" }}{{- else }}"/var/appsettings.json"{{- end }}
                      ## @param appConfig.fileName 配置文件名
                      ##  
                      fileName: {{ if .Values.advanced.enabledAppConfig }}{{ .Values.advanced.fileNameOfAppConfig | default "config.json" }}{{- else }}"config.json"{{- end }}
                      ## @param appConfig.fileContent [string] 配置文件内容
                      ##  
                      fileContent: |
                        {{- if .Values.advanced.enabledAppConfig -}}
                        {{ .Values.advanced.fileContentOfAppConfig | default "" | nindent 20 }}
                        {{- end }}


                    ## @param replicaCount 部署副本数
                    ##
                    replicaCount: {{ .Values.advanced.replicaCount | default 1 }}
                    autoscaling:
                      ## @param autoscaling.enabled 是否启用自动伸缩
                      ## @param autoscaling.minReplicas 自动伸缩的最小副本数
                      ## @param autoscaling.maxReplicas 自动伸缩的最大副本数
                      ## @param autoscaling.targetCPUUtilizationPercentage 目标CPU使用率
                      ## @param autoscaling.targetMemoryUtilizationPercentage 目标内存使用率
                      ##
                      enabled: {{ .Values.advanced.enabledAutoscaling | default false }}
                      {{- if and .Values.advanced.enabledAutoscaling .Values.advanced.scaling }}
                      minReplicas: {{ .Values.advanced.scaling.minReplicas | default 1 }}
                      maxReplicas: {{ .Values.advanced.scaling.maxReplicas | default 3 }}
                      targetCPUUtilizationPercentage: {{ .Values.advanced.scaling.targetCPUUtilizationPercentage | default 80 }}
                      targetMemoryUtilizationPercentage: {{ .Values.advanced.scaling.targetMemoryUtilizationPercentage | default 80 }}
                      {{- else }}
                      minReplicas: 1
                      maxReplicas: 3
                      targetCPUUtilizationPercentage: 80
                      targetMemoryUtilizationPercentage: 80
                      {{- end }}




                    ## @section 可选的附加高级参数
                    ## @descriptionStart 该节点用于配置一些个性化的高级参数，
                    ##
                    ## 高级参数建议定义在[该节点下](#高级参数).
                    ## @descriptionEnd
                    ## @param podAnnotations [object] 附加的pod annotations注解 [参考说明](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)
                    ##
                    podAnnotations: {}
                    ## @param podSecurityContext [object] 配置PodSecurityContext [参考说明](https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/security-context/)
                    ##
                    podSecurityContext: {}
                      # fsGroup: 2000

                    ## @param securityContext [object] 配置容器SecurityContext [参考说明](https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container)
                    ##
                    securityContext: {}
                      # capabilities:
                      #   drop:
                      #   - ALL
                      # readOnlyRootFilesystem: true
                      # runAsNonRoot: true
                      # runAsUser: 1000    

                    ## @param nodeSelector [object] 调度策略之节点选择器 [参考说明](https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector)
                    ##
                    nodeSelector: {}  
                    ## @param tolerations [array] 调度策略之污点与容忍度 [参考说明](https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/taint-and-toleration/)
                    ##
                    tolerations: []
                    ## @param affinity [object] 调度策略之亲和性 [参考说明](https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity)
                    ##
                    affinity: {}    
                    EOF

                    cat > /helmchart/README.md << EOF
                    # $chartname

                    [$chartname]({{ .Values.basic.home | default "https://github.com/$chartname" }}) {{ .Values.basic.description }}

                    ## TL;DR

                    \`\`\`shell
                    helm install myrelease oci://{{ .Release.OciRegistry.Host }}/{{ if .Release.OciRegistry.Group }}{{ .Release.OciRegistry.Group }}/{{ end }}{{ .Release.Workspace }}/{{ .Release.Namespace }}/helmcharts/$chartname --version {{ .Values.basic.version }}
                    \`\`\`

                    ## Introduction

                    This chart bootstraps a $chartname deployment on a [Kubernetes](http://kubernetes.io) cluster using the [Helm](https://helm.sh) package manager.

                    ## Prerequisites

                    - Kubernetes 1.20+
                    - Helm 3.8.0

                    ## Installing the Chart

                    To install the chart with the release name \`my-release\`:

                    \`\`\`shell
                    helm install myrelease oci://{{ .Release.OciRegistry.Host }}/{{ if .Release.OciRegistry.Group }}{{ .Release.OciRegistry.Group }}/{{ end }}{{ .Release.Workspace }}/{{ .Release.Namespace }}/helmcharts/$chartname --version {{ .Values.basic.version }}
                    \`\`\`

                    The command deploys $chartname on the Kubernetes cluster in the default configuration. The [Parameters](#parameters) section lists the parameters that can be configured during installation.

                    ## Uninstalling the Chart

                    To uninstall/delete the \`my-release\` deployment:

                    \`\`\`shell
                    helm uninstall my-release
                    \`\`\`

                    The command removes all the Kubernetes components associated with the chart and deletes the release.
                    ## Parameters

                    autogenerated by [shipper-platform](https://github.com/lingbohome)
                    EOF

                

                    helm lint /helmchart/
                    readme-generator -v /helmchart/values.yaml -r /helmchart/README.md -s /helmchart/values.schema.json

                    helm package /helmchart/        

                    packagefilename="${chartname}{{- printf "-%s.tgz" .Values.basic.version }}"

                    chartdigest=$(helm push $packagefilename  oci://{{ .Release.OciRegistry.Host }}/{{ if .Release.OciRegistry.Group }}{{ .Release.OciRegistry.Group }}/{{ end }}{{ .Release.Workspace }}/{{ .Release.Namespace }}/helmcharts 2>&1)

                    echo -e "$chartdigest"

                    sha256_digest=$(echo -e "$chartdigest" | grep -o 'Digest: sha256:[a-fA-F0-9]\{64\}' | sed 's/Digest: //')

                    sha256_hash=sha256:$(sha256sum "$packagefilename" | awk '{print $1}')

                    usehttps={{- .Release.OSS.S3.UseHttps | default "false" }}
                    bucket={{ .Release.Workspace | default "helm-charts" }}
                    schema=http

                    if [ "$usehttps" = true ]; then
                        schema=https
                    fi

                    mc alias set oss $schema://{{- .Release.OSS.S3.Endpoint | default "minioserver.example.net" }} {{ .Release.OSS.S3.AccessKey }} {{ .Release.OSS.S3.SecretKey }} 
                    mc mb oss/$bucket  --ignore-existing
                    mc put $packagefilename oss/$bucket/{{ .Release.Namespace }}/{{ .Release.BuilderName }}/$packagefilename


                    indexkey=oss/$bucket/{{ .Release.Namespace }}/helmcharts/index.yaml
                    if mc stat "$indexkey" > /dev/null 2>&1; then
                        echo "index.yaml exists"
                        onlineindex="/tmp/index.yaml"
                        mc cp "$indexkey" "$onlineindex"
                        helm repo index  --url $schema://{{- .Release.OSS.S3.Endpoint | default "minioserver.example.net" }}/$bucket/{{ .Release.Namespace }}/{{ .Release.BuilderName }}  --merge $onlineindex .
                    else
                        echo "index.yaml does not exist"
                        helm repo index  --url $schema://{{- .Release.OSS.S3.Endpoint | default "minioserver.example.net" }}/$bucket/{{ .Release.Namespace }}/{{ .Release.BuilderName }}  .
                    fi

                    mc put index.yaml $indexkey

                    echo "> helmchart index.yaml uploaded..."
                    echo "> helmchart package uploaded..."
                    echo -n "$sha256_hash" | tee "$(results.HELMCHART_PACKAGE_DIGEST.path)"
                    echo -n "$sha256_digest" | tee "$(results.HELMCHART_PACKAGE_OCI_DIGEST.path)"
                    echo -e "\n"
                    echo -n "{{ .Release.Namespace }}/{{ .Release.BuilderName }}/$packagefilename" | tee "$(results.HELMCHART_PACKAGE_OSSNAME.path)" 
                    echo -e "\n"
                    echo -n "$bucket" | tee "$(results.HELMCHART_PACKAGE_BUCKET.path)"  

                    echo -e "\n\nShow helmchart README.md  >>>>"
                    glow /helmchart/README.md -w 150                              
        finally:
          - name: artifacts-producer
            params:
              - name: HELMCHART_PACKAGE_DIGEST
                value: "$(tasks.helmchart-generator.results.HELMCHART_PACKAGE_DIGEST)"
              - name: HELMCHART_PACKAGE_OCI_DIGEST
                value: "$(tasks.helmchart-generator.results.HELMCHART_PACKAGE_OCI_DIGEST)"                
              - name: HELMCHART_PACKAGE_OSSNAME
                value: "$(tasks.helmchart-generator.results.HELMCHART_PACKAGE_OSSNAME)" 
              - name: HELMCHART_PACKAGE_BUCKET
                value: "$(tasks.helmchart-generator.results.HELMCHART_PACKAGE_BUCKET)"                                                                                                                       
            taskSpec:
              description: |
                      A simple task that populates artifacts to TaskRun result
              params:
                - name: HELMCHART_PACKAGE_DIGEST
                - name: HELMCHART_PACKAGE_OCI_DIGEST
                - name: HELMCHART_PACKAGE_OSSNAME 
                - name: HELMCHART_PACKAGE_BUCKET                                       
              results:
                - description: artifact info.
                  name: ArtifactInfo
                  type: string       
              steps:
                - name: emitting-artifacts
                  image: registry.cn-shanghai.aliyuncs.com/kube-shipper/bash:5.1.4
                  script: |
                    cat > $(results.ArtifactInfo.path) << EOF
                    {
                      "description":"基于用户可视化定义元数据，生成的单个无状态服务的helmchart package",
                      "outputs":[
                        {
                          "name":"chart-for-file",
                          "producer":"helmchart-generator",
                          "type":"oss",
                          "format":"helmchart",
                          "url":"pkg:oss/$(params.HELMCHART_PACKAGE_OSSNAME)?endpoint={{ .Release.OSS.S3.Endpoint }}&bucket=$(params.HELMCHART_PACKAGE_BUCKET)&usehttps={{- .Release.OSS.S3.UseHttps | default "false" }}",
                          "digest":"$(params.HELMCHART_PACKAGE_DIGEST)",
                          "displayName":"$(params.HELMCHART_PACKAGE_BUCKET)/$(params.HELMCHART_PACKAGE_OSSNAME)",
                          "description":""
                        },
                        {
                          "name":"chart-for-oci",
                          "producer":"helmchart-generator",
                          "type":"oci",
                          "format":"helmchart",
                          "url":"pkg:oci/{{ if .Release.OciRegistry.Group }}{{ .Release.OciRegistry.Group }}/{{ end }}{{ .Release.Workspace }}/{{ .Release.Namespace }}/helmcharts/{{- if .Values.basic.followBuilderName }}{{ .Release.BuilderName }}{{- else }}{{ .Values.basic.name | default .Release.BuilderName }}{{- end }}@{{ .Values.basic.version }}?repository_url={{ .Release.OciRegistry.Host }}",
                          "digest":"$(params.HELMCHART_PACKAGE_OCI_DIGEST)",
                          "displayName":"oci://{{ .Release.OciRegistry.Host }}/{{ if .Release.OciRegistry.Group }}{{ .Release.OciRegistry.Group }}/{{ end }}{{ .Release.Workspace }}/{{ .Release.Namespace }}/helmcharts/{{- if .Values.basic.followBuilderName }}{{ .Release.BuilderName }}{{- else }}{{ .Values.basic.name | default .Release.BuilderName }}{{- end }} --version {{ .Values.basic.version }}",
                          "description":"install cmd ：helm install my-release oci://xxx..."
                        }
                      ]
                    }
                    EOF
        results:
          - name: shipper-artifacts
            value: $(finally.artifacts-producer.results.ArtifactInfo)
        workspaces:
          - name: dockerconfig-ws
            description: An optional workspace that allows providing a .docker/config.json.
            optional: true
      workspaces:  
          {{- if .Release.OciRegistry.Credentials }}
        - name: dockerconfig-ws
          secret:
            secretName: {{ .Release.OciRegistry.Credentials }}
          {{- end }}                         
  values.yaml: |
    basic:
      followBuilderName: true
    resources: 
      limitsCPU: 4
      limitsMemory: 4
      requestsCPU: 10
      requestsMemory: 128
  values.schema.json: |
    {
        "properties": {
          "basic": {
            "description": "配置单个无状态应用或服务的helmchart基本信息",
            "title": "基本信息",
            "type": "object",
            "properties":{
                "followBuilderName": {
                  "title": "名称",
                  "description": "是否将chart的名称与构建器名称保持一致",
                  "type": "boolean",
                  "x-shipper-ui": {
                      "tooltip": "跟随构建器"
                    }
                },
                "name": {
                    "title": "设置名称",
                    "description": "设置helmchart的package名称，只能包含小写字母、数字和连字符（-），必须以小写字母开头并以小写字母或数字结尾，最长 63 个字符",
                    "type": "string",
                    "pattern":"[a-z]([-a-z0-9]*[a-z0-9])?",
                    "maxLength": 63,
                    "x-shipper-ui": {
                      "visibleIf":{
                        "followBuilderName": "false"
                      }
                    }
                  },
                  "aliasName": {
                    "title": "别名",
                    "description": "别名只能包含中文、字母、数字和连字符（-），不得以连字符（-）开头或结尾，最长 63 个字符。",
                    "type": "string",
                    "maxLength": 63,
                    "pattern":"^(?!-)(?!.*-$)[\u4e00-\u9fa5a-zA-Z0-9-]+$"
                  },
                  "version": {
                    "title": "版本",
                    "description": "版本号需要符合[semver2.0]的语义化版本号规范",
                    "type": "string",
                    "pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(\\-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$"
                  },
                  "category": {
                    "title": "类别/用途",
                    "description": "对应用程序或服务进行分类和区分，具体的业务服务，一般用[前端]或[后端]来标识，非业务类使用其他更能代表意图的类别标识。",
                    "type": "string",
                    "enum": [{
                        "label": "前端",
                        "value": "frontend"
                      },
                      {
                        "label": "后端",
                        "value": "backend"
                      },
                      {
                        "label": "缓存",
                        "value": "cache"
                      },
                      {
                        "label": "中间件",
                        "value": "middleware"
                      },
                      {
                        "label": "监控",
                        "value": "monitoring"
                      },
                      {
                        "label": "数据库",
                        "value": "database"
                      },
                      {
                        "label": "日志",
                        "value": "logging"
                      },
                      {
                        "label": "存储",
                        "value": "storage"
                      },
                      {
                        "label": "网关",
                        "value": "gateway"
                      },
                      {
                        "label": "认证",
                        "value": "auth"
                      },
                      {
                        "label": "安全",
                        "value": "security"
                      },
                      {
                        "label": "网络",
                        "value": "networking"
                      },                      
                      {
                        "label": "其他",
                        "value": "other"
                      }
                    ]
                  },
                  "keywords":{
                    "type": "array",
                    "title": "功能特性",
                    "maxItems":3,
                    "description": "标识您的应用程序或服务所具备的功能特性关键词，最可配3个。",
                    "items":{
                      "type":"string"
                    }
                  },
                  "description": {
                    "title": "描述",
                    "description": "描述可包含任意字符，最长 256 个字符。",
                    "type": "string",
                    "maxLength": 256,
                    "x-shipper-ui": {
                      "widget":"textarea",
                      "placeholder": "写个描述吧...",
                      "maxRows": 3
                    }
                  },
                  "home": {
                    "title": "主页",
                    "description": "配置项目的主页地址,eg：https://www.example.com",
                    "type": "string",
                    "maxLength": 128,
                    "pattern":"^(https?:\\/\\/)?([\\w.-]+)([\\/\\w\\.-]*)*\\/?$"
                  },
                  "icon": {
                    "title": "icon",
                    "description": "用做项目icon的SVG或PNG图片URL",
                    "type": "string",
                    "maxLength": 256,
                    "pattern":"^(https?:\\/\\/)?([\\w.-]+)([\\/\\w\\.-]*)*\\/?$"
                  },
                  "maintainers": {
                    "title": "配置chart的作者",
                    "description": "配置chart的维护者信息",
                    "type": "array",
                    "maxItems": 3,
                    "items":{
                      "type":"object",
                      "properties": {
                        "name": {
                          "title": "维护者名称",
                          "type": "string",
                          "maxLength": 15,
                          "description": "维护者名称，必填"
                        },
                        "email": {
                          "title": "维护者邮箱",
                          "description": "维护者邮箱，可选",
                          "type": "string",
                          "pattern":"^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$"
                        },
                        "url": {
                          "title": "维护者URL",
                          "description": "维护者URL，可选",
                          "type": "string",
                          "pattern":"^(https?:\\/\\/)?([\\w.-]+)([\\/\\w\\.-]*)*\\/?$",
                          "x-shipper-ui": {
                            "placeholder": "如：https://github.com/lingbohome"
                          }
                        }
                      },
                      "order":["name","email","url"],
                      "required":["name"]
                    }
                  }
            },
            "order": [
                "followBuilderName",
                "name",
                "aliasName",
                "version",
                "home",
                "icon",
                "category",       
                "description",
                "keywords",
                "maintainers"
              ],
            "required": [
                "followBuilderName",
                "name",
                "version",
                "aliasName",
                "category",
                "description"
              ]
          },
          "image": {
            "description": "配置单个无状态应用或服务的容器镜像",
            "title": "配置镜像",
            "type": "object",
            "properties":{
                "registry": {
                    "title": "镜像仓库",
                    "description": "镜像仓库host地址，如：my.imagehub.com",
                    "type": "string"
                  },
                "repository": {
                    "title": "镜像存储库",
                    "description": "镜像名称或带有存储库的名称，如：nginx，myrepo/nginx",
                    "type": "string"
                  },
                "tag": {
                    "title": "镜像Tag",
                    "description": "镜像Tag号",
                    "type": "string"
                  },
                "pullPolicy": {
                    "title": "镜像拉取策略",
                    "type": "string",
                    "enum": [{
                        "label": "Always",
                        "value": "Always"
                      },
                      {
                        "label": "IfNotPresent",
                        "value": "IfNotPresent"
                      },
                      {
                        "label": "Never",
                        "value": "Never"
                      }
                    ]
                  }
            },
            "order": [
                "registry",
                "repository",
                "tag",
                "pullPolicy"
              ],
            "required": [
                "registry",
                "repository",
                "tag",
                "pullPolicy"
              ]
          },
          "networking": {
            "description": "配置单个无状态应用或服务的网络",
            "title": "配置网络",
            "type": "object",
            "properties":{
                "serviceType": {
                    "title": "服务类型",
                    "description": "定义服务访问的方式",
                    "type": "string",
                    "enum": [{
                        "label": "ClusterIP",
                        "value": "ClusterIP"
                      },
                      {
                        "label": "NodePort",
                        "value": "NodePort"
                      },
                      {
                        "label": "LoadBalancer",
                        "value": "LoadBalancer"
                      }
                    ]
                  },
                "port": {
                    "title": "服务端口",
                    "description": "服务在集群内的端口，同时也是您的容器内程序监听的端口",
                    "type": "integer",
                    "minimum": 10
                  },
                "nodePort": {
                    "title": "服务对外访问端口",
                    "description": "服务对集群外暴露的端口",
                    "type": "integer",
                    "minimum": 20000,
                    "maximum": 40000,
                    "x-shipper-ui": {
                        "visibleIf":{
                          "serviceType":"NodePort"
                        }
                      }
                  },
                "enabledIngress": {
                    "title": "开启入口网关",
                    "description": "开启后，可在集群外通过网关地址访问",
                    "type": "boolean",
                    "x-shipper-ui": {
                        "tooltip": "启用"
                      }
                  },
                "ingress": {
                    "title": "配置入口网关",
                    "description": "配置单个无状态应用或服务的网关",
                    "type": "object",
                    "properties": {
                        "host":{
                          "title": "入口主机域名",
                          "description": "访问入口主机域名，如：myservice.mydomain.com",
                          "pattern":"^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                          "type": "string"
                        },
                        "className":{
                            "title": "网关提供者",
                            "description": "配置使用哪个网关提供者，为您的服务提供访问能力",
                            "x-shipper-ui": {
                                "placeholder": "没有配置时，默认使用集群管理员设置的默认网关提供者"
                              },
                            "type": "string"
                          },
                        "annotations":{
                            "title": "入口网关注解",
                            "description": "根据不同的网关提供者文档，满足更多复杂场景的配置",
                            "type": "object",
                            "additionalProperties":{
                                "type":"string"
                              }
                          }
                      },
                      "x-shipper-ui": {
                        "visibleIf":{
                          "enabledIngress":"true"
                        }
                      },
                      "order": [
                        "host",
                        "className",
                        "annotations" 
                      ],
                      "required": [
                        "host"
                      ]  
                  }  
            },
            "order": [
                "serviceType",
                "port",
                "nodePort",
                "enabledIngress",
                "ingress"
              ],
            "required": [
                "serviceType",
                "port",
                "nodePort"
              ]
          },
          "environment": {
            "description": "配置单个无状态应用或服务的环境变量",
            "title": "环境变量",
            "type": "object",
            "properties":{
                "envs": {
                    "title": "设置环境变量",
                    "type": "object",
                    "additionalProperties":{
                        "type":"string"
                      }
                  }
            }
          },
          "resources": {
            "description": "配置单个无状态应用或服务的所需的计算资源",
            "title": "配置计算资源",
            "type": "object",
            "properties":{
                "limitsCPU": {
                    "title": "CPU最大使用量",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 8,
                    "x-shipper-ui": {
                        "widget": "slider",
                        "step":1,
                        "marks":[{
                          "label": "1Gi",
                          "value": 1
                        },
                        {
                          "label": "2Gi",
                          "value": 2
                        },          {
                          "label": "3Gi",
                          "value": 3
                        },   {
                          "label": "4Gi",
                          "value": 4
                        },{
                            "label": "5Gi",
                            "value": 5
                          },
                          {
                            "label": "6Gi",
                            "value": 6
                          },          {
                            "label": "7Gi",
                            "value": 7
                          },   {
                            "label": "8Gi",
                            "value": 8
                          }
                        ]
                      }
                  },
                  "limitsMemory": {
                    "title": "内存最大使用量",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 8,
                    "x-shipper-ui": {
                        "widget": "slider",
                        "step":1,
                        "marks":[{
                          "label": "1Gi",
                          "value": 1
                        },
                        {
                          "label": "2Gi",
                          "value": 2
                        },          {
                          "label": "3Gi",
                          "value": 3
                        },   {
                          "label": "4Gi",
                          "value": 4
                        },{
                            "label": "5Gi",
                            "value": 5
                          },
                          {
                            "label": "6Gi",
                            "value": 6
                          },          {
                            "label": "7Gi",
                            "value": 7
                          },   {
                            "label": "8Gi",
                            "value": 8
                          }
                        ]
                      }
                  },
                  "requestsCPU": {
                    "title": "CPU最低预算",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 800,
                    "x-shipper-ui": {
                        "widget": "slider",
                        "step":1,
                        "marks":[{
                          "label": "1m",
                          "value": 1
                        },
                        {
                          "label": "100m",
                          "value": 100
                        },          {
                          "label": "200m",
                          "value": 200
                        },   {
                          "label": "300m",
                          "value": 300
                        },{
                            "label": "400m",
                            "value": 400
                          },
                          {
                            "label": "500m",
                            "value": 500
                          },          {
                            "label": "600m",
                            "value": 600
                          },   {
                            "label": "700m",
                            "value": 700
                          }, {
                            "label": "800m",
                            "value": 800
                          }
                        ]
                      }
                  },
                  "requestsMemory": {
                    "title": "内存最低预算",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 800,
                    "x-shipper-ui": {
                        "widget": "slider",
                        "step":1,
                        "marks":[{
                          "label": "1Mi",
                          "value": 1
                        },
                        {
                          "label": "100Mi",
                          "value": 100
                        },          {
                          "label": "200Mi",
                          "value": 200
                        },   {
                          "label": "300Mi",
                          "value": 300
                        },{
                            "label": "400Mi",
                            "value": 400
                          },
                          {
                            "label": "500Mi",
                            "value": 500
                          },          {
                            "label": "600Mi",
                            "value": 600
                          },   {
                            "label": "700Mi",
                            "value": 700
                          }, {
                            "label": "800Mi",
                            "value": 800
                          }
                        ]
                      }
                  }              
            },
            "order": [
                "limitsCPU",
                "limitsMemory",
                "requestsCPU",
                "requestsMemory"
              ],
            "required": [
                "limitsCPU",
                "limitsMemory",
                "requestsCPU",
                "requestsMemory"
              ]
          },
          "advanced": {
            "description": "配置单个无状态应用或服务的高级部署设置",
            "title": "高级设置",
            "type": "object",
            "properties":{
                "enabledHealthCheck": {
                    "title": "启用健康检查",
                    "description": "启用后，会定期探测服务是否健康，不健康的服务会自动重启",
                    "type": "boolean",
                    "x-shipper-ui": {
                        "tooltip": "启用"
                      }
                  },
                "httpPathOfHealthCheck": {
                    "title": "健康检查的httppath",
                    "description": "提供健康探测的http接口路径，比如：/api/ready",
                    "type": "string",
                    "x-shipper-ui": {
                        "visibleIf":{
                          "enabledHealthCheck":"true"
                        }
                      }
                  },
                  "enabledAppConfig": {
                    "title": "设置应用的配置文件",
                    "description": "设置后，将会将您设置的文件内容，挂载到您设置的文件路径下",
                    "type": "boolean",
                    "x-shipper-ui": {
                        "tooltip": "设置"
                      }
                  }, 
                  "mountPathOfAppConfig": {
                    "title": "挂载配置文件的路径",
                    "description": "路径为服务容器内的值，比如：/var/nginx/conf.d/default.conf",
                    "type": "string",
                    "x-shipper-ui": {
                        "visibleIf":{
                          "enabledAppConfig":"true"
                        }
                      }
                  },
                  "fileNameOfAppConfig": {
                    "title": "配置文件名",
                    "description": "用来存储您设置的配置文件的名称，比如：default.conf",
                    "type": "string",
                    "x-shipper-ui": {
                        "visibleIf":{
                          "enabledAppConfig":"true"
                        }
                      }
                  }, 
                  "fileContentOfAppConfig": {
                    "title": "配置文件内容",
                    "description": "用来存储您设置的配置文件的内容",
                    "type": "string",
                    "maxLength":5000,
                    "x-shipper-ui": {
                        "widget":"textarea",
                        "maxRows": 5,
                        "visibleIf":{
                          "enabledAppConfig":"true"
                        }
                      }
                  },                                                         
                "startEntrySetting": {
                    "title": "服务启动入口设置",
                    "type": "object",
                    "properties": {
                        "command":{
                          "title": "启动命令",
                          "description": "服务容器的启动命令",
                          "type": "array",
                          "items":{
                            "type":"string"
                          }
                        },
                        "args":{
                            "title": "启动参数",
                            "description": "服务容器的启动参数",
                            "type": "array",
                            "items":{
                              "type":"string"
                            }
                          }
                      },
                      "order": [
                        "command",
                        "args"
                      ]
                  },
                  "enabledAutoscaling": {
                    "title": "设置自动伸缩",
                    "description": "启用后，运行时自动根据服务的cpu或内存评估缩放副本数量",
                    "type": "boolean",
                    "x-shipper-ui": {
                        "tooltip": "设置"
                      }
                  },               
                  "scaling": {
                    "title": "自动伸缩",
                    "description": "配置单个无状态应用或服务的自动伸缩规则",
                    "type": "object",
                    "properties": {
                        "minReplicas":{
                          "title": "最小副本数",
                          "description": "可自动伸缩的最小副本数",
                          "minimum": 1,
                          "maximum": 3,
                          "type": "integer"
                        },
                        "maxReplicas":{
                            "title": "最大副本数",
                            "description": "可自动伸缩的最大副本数",
                            "minimum": 3,
                            "maximum": 10,
                            "type": "integer"
                          },
                        "targetCPUUtilizationPercentage":{
                            "title": "CPU使用率百分比",
                            "description": "当目标CPU使用率百分比达到指定值时，开始自动缩放",
                            "minimum": 10,
                            "maximum": 100,
                            "type": "integer",
                            "x-shipper-ui": {
                                "widget": "slider",
                                "step":10,
                                "marks":[{
                                  "label": "10%",
                                  "value": 10
                                },
                                {
                                  "label": "20%",
                                  "value": 20
                                },          {
                                  "label": "30%",
                                  "value": 30
                                },   {
                                  "label": "40%",
                                  "value": 40
                                },{
                                    "label": "50%",
                                    "value": 50
                                  },
                                  {
                                    "label": "60%",
                                    "value": 60
                                  }, {
                                    "label": "70%",
                                    "value": 70
                                  },   {
                                    "label": "80%",
                                    "value": 80
                                  },
                                  {
                                    "label": "90%",
                                    "value": 90
                                  },   {
                                    "label": "100%",
                                    "value": 100
                                  }
                                ]
                              }
                          },
                          "targetMemoryUtilizationPercentage":{
                            "title": "内存使用率百分比",
                            "description": "当目标内存使用率百分比达到指定值时，开始自动缩放",
                            "minimum": 10,
                            "maximum": 100,
                            "type": "integer",
                            "x-shipper-ui": {
                                "widget": "slider",
                                "step":10,
                                "marks":[{
                                  "label": "10%",
                                  "value": 10
                                },
                                {
                                  "label": "20%",
                                  "value": 20
                                },          {
                                  "label": "30%",
                                  "value": 30
                                },   {
                                  "label": "40%",
                                  "value": 40
                                },{
                                    "label": "50%",
                                    "value": 50
                                  },
                                  {
                                    "label": "60%",
                                    "value": 60
                                  }, {
                                    "label": "70%",
                                    "value": 70
                                  },   {
                                    "label": "80%",
                                    "value": 80
                                  },
                                  {
                                    "label": "90%",
                                    "value": 90
                                  },   {
                                    "label": "100%",
                                    "value": 100
                                  }
                                ]
                              }
                          }
                      },
                      "x-shipper-ui": {
                        "visibleIf":{
                          "enabledAutoscaling":"true"
                        }
                      },
                      "order": [
                        "minReplicas",
                        "maxReplicas",
                        "targetCPUUtilizationPercentage",
                        "targetMemoryUtilizationPercentage"
                      ],
                      "required": [
                        "minReplicas",
                        "maxReplicas",
                        "targetCPUUtilizationPercentage",
                        "targetMemoryUtilizationPercentage"
                      ]
                  },
                  "replicaCount": {
                    "title": "副本数量",
                    "description": "表示运行时启动服务副本的数量",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 10,
                    "x-shipper-ui": {
                        "visibleIf":{
                          "enabledAutoscaling":"false"
                        }
                      }
                  }
            },
            "order": [
                "enabledHealthCheck",
                "httpPathOfHealthCheck",
                "enabledAppConfig",
                "mountPathOfAppConfig",
                "fileNameOfAppConfig",
                "fileContentOfAppConfig",
                "startEntrySetting",
                "enabledAutoscaling",
                "scaling",
                "replicaCount"
              ],
            "required": [
                "httpPathOfHealthCheck",
                "mountPathOfAppConfig",
                "fileNameOfAppConfig",
                "fileContentOfAppConfig",
                "replicaCount"
              ]
          }                                      
        },
        "order": [
          "basic",
          "image",
          "networking",
          "environment",
          "resources",
          "advanced"
        ],
        "required": [
          "basic",
          "image",
          "networking",
          "resources"
        ],
        "title": "Values",
        "type": "object"
      }  